define(["Q","socketio","env","constants/SOCKET_EVENTS","services/serializeService","actions/server","constants/LOG_TYPE"],function(a,b,c,d,e,f,g){function h(){this._connectionDeferred=null,this._socket=null}return h.prototype.setup=function(){return this._connectionDeferred=a.defer(),this._socket=io.connect("",{reconnect:!1}),this._bindSocketEvents(),this._connectionDeferred.promise},h.prototype._bindSocketEvents=function(){this._socket.on(d.CONNECT,this._onSocketConnect.bind(this)),this._socket.on(d.DISCONNECT,this._onSocketDisconnect.bind(this)),this._socket.on(d.ERROR,this._onSocketError.bind(this)),this._socket.on(d.CONNECT_FAILED,this._onSocketError.bind(this)),this._socket.on(d.MESSAGE,this._onSocketMessage.bind(this))},h.prototype.emit=function(a,b){b=b||{},a=a.name||a,this._socket.emit(a,b)},h.prototype._onSocketConnect=function(){this._connectionDeferred.resolve()},h.prototype._onSocketDisconnect=function(){},h.prototype._onSocketError=function(a){this._connectionDeferred.reject(a)},h.prototype._onSocketMessage=function(a){if(a&&a.event)switch(a.event){case d.SWAMP_INITIAL:var b=[],h=[];_.forEach(a.data.services||[],function(a){b.push(e.serializeSwampService(a))}),_.forEach(a.data.plugins||[],function(a){h.push(e.serializeSwampPlugin(a))}),c.info=a.data.swamp.info,f.firstDataReceived(a.data.swamp,b,h);break;case d.SWAMP_OUT:var i=e.serializeLogData(g.OUT,a.data.log);f.swampOutLogReceived(i);break;case d.SWAMP_ERROR:var i=e.serializeLogData(g.ERROR,a.data.log);f.swampErrorLogReceived(i);break;case d.SERVICE_MONITOR:var i=e.serializeMonitorData(a.data),j=a.data.name;f.serviceMonitorDataReceived(j,i);break;case d.SERVICE_START:var i=e.serializeServiceStart(a.data),j=a.data.name;f.serviceStart(j,i);break;case d.SERVICE_STOP:var i=e.serializeServiceStop(a.data),j=a.data.name;f.serviceStop(j,i);break;case d.SERVICE_RESTART:var j=a.data.name;f.serviceRestart(j);break;case d.SERVICE_OUT:var i=e.serializeLogData(g.OUT,a.data.log),j=a.data.name;f.serviceOutLogReceived(j,i);break;case d.SERVICE_ERROR:var i=e.serializeLogData(g.ERROR,a.data.log),j=a.data.name;f.serviceErrorLogReceived(j,i);break;case d.MODIFY_SERVICE_ENVIRONMENTS:var i=e.serializeServiceEnvironments(a.data),j=a.data.name;f.serviceEnvironmentsModified(j,i)}},new h});